
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import com.scalified.tree.*;
import com.scalified.tree.multinode.*;
import java.util.List;
import java.util.ArrayList;
import Visitor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\004\006\000\002\004\002\000\002\042\005" +
    "\000\002\042\002\000\002\025\005\000\002\041\005\000" +
    "\002\041\002\000\002\035\003\000\002\035\003\000\002" +
    "\037\005\000\002\037\002\000\002\006\006\000\002\007" +
    "\004\000\002\005\003\000\002\010\006\000\002\036\005" +
    "\000\002\036\002\000\002\011\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\014\005\000\002\015\007\000\002\043" +
    "\005\000\002\043\002\000\002\027\003\000\002\016\003" +
    "\000\002\033\003\000\002\017\007\000\002\040\005\000" +
    "\002\040\002\000\002\021\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\022\006\000\002\022" +
    "\010\000\002\023\007\000\002\020\003\000\002\020\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\034\003\000\002\034\003\000\002\031" +
    "\003\000\002\032\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\003\000" +
    "\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\010\005\001\002\000\004\002\162\001" +
    "\002\000\004\011\006\001\002\000\004\012\007\001\002" +
    "\000\010\014\010\015\ufffd\020\ufffd\001\002\000\004\011" +
    "\144\001\002\000\006\015\014\020\ufff4\001\002\000\004" +
    "\013\013\001\002\000\004\002\001\001\002\000\004\011" +
    "\137\001\002\000\004\012\135\001\002\000\004\020\017" +
    "\001\002\000\016\011\031\020\017\021\035\022\022\023" +
    "\033\025\026\001\002\000\006\012\ufff1\013\ufff1\001\002" +
    "\000\004\013\uffff\001\002\000\004\004\125\001\002\000" +
    "\010\012\uffec\027\uffec\040\uffec\001\002\000\006\012\120" +
    "\027\uffee\001\002\000\010\012\uffdb\027\uffdb\040\uffdb\001" +
    "\002\000\024\004\052\006\045\011\061\034\062\035\051" +
    "\036\055\041\053\042\047\043\046\001\002\000\032\005" +
    "\uffcb\006\uffcb\012\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\037\uffcb\040\uffcb\001\002\000" +
    "\010\012\uffda\027\uffda\040\uffda\001\002\000\012\012\uffe1" +
    "\027\uffe1\030\uffca\040\uffe1\001\002\000\010\012\uffeb\027" +
    "\uffeb\040\uffeb\001\002\000\024\004\052\006\045\011\061" +
    "\034\062\035\051\036\055\041\053\042\047\043\046\001" +
    "\002\000\010\012\uffdc\027\uffdc\040\uffdc\001\002\000\004" +
    "\004\077\001\002\000\010\012\uffe9\027\uffe9\040\uffe9\001" +
    "\002\000\010\012\uffe8\027\uffe8\040\uffe8\001\002\000\010" +
    "\012\uffea\027\uffea\040\uffea\001\002\000\004\030\044\001" +
    "\002\000\010\012\uffed\027\uffed\040\uffed\001\002\000\010" +
    "\012\uffe2\027\uffe2\040\uffe2\001\002\000\024\004\052\006" +
    "\045\011\061\034\062\035\051\036\055\041\053\042\047" +
    "\043\046\001\002\000\024\004\052\006\045\011\061\034" +
    "\062\035\051\036\055\041\053\042\047\043\046\001\002" +
    "\000\030\005\uffc8\006\uffc8\012\uffc8\024\uffc8\026\uffc8\027" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8\040\uffc8\001\002" +
    "\000\030\005\uffc7\006\uffc7\012\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\037\uffc7\040\uffc7\001\002" +
    "\000\030\005\uffd2\006\uffd2\012\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\037\uffd2\040\uffd2\001\002" +
    "\000\030\005\uffc5\006\uffc5\012\uffc5\024\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\037\uffc5\040\uffc5\001\002" +
    "\000\024\004\052\006\045\011\061\034\062\035\051\036" +
    "\055\041\053\042\047\043\046\001\002\000\030\005\uffc9" +
    "\006\uffc9\012\uffc9\024\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\037\uffc9\040\uffc9\001\002\000\030\005\uffc6" +
    "\006\uffc6\012\uffc6\024\uffc6\026\uffc6\027\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\037\uffc6\040\uffc6\001\002\000\030\005\uffc4" +
    "\006\uffc4\012\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\037\uffc4\040\uffc4\001\002\000\010\012\uffe7" +
    "\027\uffe7\040\uffe7\001\002\000\030\005\uffd6\006\066\012" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\031\065\032\070\033\064" +
    "\037\uffd6\040\uffd6\001\002\000\030\005\uffd1\006\uffd1\012" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\037\uffd1\040\uffd1\001\002\000\030\005\uffca\006\uffca\012" +
    "\uffca\024\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca" +
    "\037\uffca\040\uffca\001\002\000\024\004\052\006\045\011" +
    "\061\034\062\035\051\036\055\041\053\042\047\043\046" +
    "\001\002\000\030\005\uffcf\006\uffcf\012\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\037\uffcf\040\uffcf" +
    "\001\002\000\024\004\052\006\045\011\061\034\062\035" +
    "\051\036\055\041\053\042\047\043\046\001\002\000\024" +
    "\004\052\006\045\011\061\034\062\035\051\036\055\041" +
    "\053\042\047\043\046\001\002\000\024\004\uffcc\006\uffcc" +
    "\011\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\001\002\000\024\004\052\006\045\011\061\034\062" +
    "\035\051\036\055\041\053\042\047\043\046\001\002\000" +
    "\024\004\uffcd\006\uffcd\011\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\001\002\000\030\005\uffd4\006" +
    "\066\012\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\032\070" +
    "\033\064\037\uffd4\040\uffd4\001\002\000\030\005\uffd5\006" +
    "\uffd5\012\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\037\uffd5\040\uffd5\001\002\000\030\005\uffd3\006" +
    "\uffd3\012\uffd3\024\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\037\uffd3\040\uffd3\001\002\000\004\005\075\001" +
    "\002\000\030\005\uffd0\006\uffd0\012\uffd0\024\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\032\uffd0\033\uffd0\037\uffd0\040\uffd0\001" +
    "\002\000\030\005\uffce\006\uffce\012\uffce\024\uffce\026\uffce" +
    "\027\uffce\031\uffce\032\uffce\033\uffce\037\uffce\040\uffce\001" +
    "\002\000\024\004\052\006\045\011\061\034\062\035\051" +
    "\036\055\041\053\042\047\043\046\001\002\000\006\005" +
    "\uffdd\037\uffdd\001\002\000\006\005\uffde\037\103\001\002" +
    "\000\004\005\106\001\002\000\024\004\052\006\045\011" +
    "\061\034\062\035\051\036\055\041\053\042\047\043\046" +
    "\001\002\000\006\005\uffde\037\103\001\002\000\004\005" +
    "\uffdf\001\002\000\010\012\uffe0\027\uffe0\040\uffe0\001\002" +
    "\000\004\024\110\001\002\000\016\011\031\020\017\021" +
    "\035\022\022\023\033\025\026\001\002\000\010\012\uffd9" +
    "\027\uffd9\040\112\001\002\000\016\011\031\020\017\021" +
    "\035\022\022\023\033\025\026\001\002\000\010\012\uffd8" +
    "\027\uffd8\040\uffd8\001\002\000\004\026\115\001\002\000" +
    "\016\011\031\020\017\021\035\022\022\023\033\025\026" +
    "\001\002\000\004\012\117\001\002\000\010\012\uffd7\027" +
    "\uffd7\040\uffd7\001\002\000\016\011\031\020\017\021\035" +
    "\022\022\023\033\025\026\001\002\000\004\027\122\001" +
    "\002\000\012\012\ufff0\013\ufff0\027\ufff0\040\ufff0\001\002" +
    "\000\006\012\120\027\uffee\001\002\000\004\027\uffef\001" +
    "\002\000\004\011\061\001\002\000\006\005\uffe4\037\131" +
    "\001\002\000\006\005\uffe3\037\uffe3\001\002\000\004\005" +
    "\134\001\002\000\004\011\061\001\002\000\006\005\uffe4" +
    "\037\131\001\002\000\004\005\uffe5\001\002\000\010\012" +
    "\uffe6\027\uffe6\040\uffe6\001\002\000\006\015\014\020\ufff4" +
    "\001\002\000\004\020\ufff5\001\002\000\004\012\140\001" +
    "\002\000\006\014\010\020\ufffd\001\002\000\004\012\ufff3" +
    "\001\002\000\004\020\017\001\002\000\004\012\ufff2\001" +
    "\002\000\010\016\ufff8\017\ufff8\037\154\001\002\000\004" +
    "\012\146\001\002\000\010\011\144\015\ufffb\020\ufffb\001" +
    "\002\000\004\012\151\001\002\000\006\015\ufffe\020\ufffe" +
    "\001\002\000\010\011\144\015\ufffb\020\ufffb\001\002\000" +
    "\006\015\ufffc\020\ufffc\001\002\000\006\016\157\017\161" +
    "\001\002\000\004\011\155\001\002\000\010\016\ufff8\017" +
    "\ufff8\037\154\001\002\000\006\016\ufff9\017\ufff9\001\002" +
    "\000\004\012\ufff7\001\002\000\004\012\ufffa\001\002\000" +
    "\004\012\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\004\025\144\001\001\000\006\006\014\037" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\020\010\017\001" +
    "\001\000\034\010\033\011\023\012\041\013\022\014\031" +
    "\015\037\016\035\017\036\022\024\023\027\031\040\032" +
    "\026\033\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\120\001" +
    "\001\000\002\001\001\000\016\020\113\024\056\026\057" +
    "\030\053\031\047\032\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\106\024\056\026\057\030\053\031\047\032\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\055\024\056" +
    "\026\057\030\053\031\047\032\026\001\001\000\014\024" +
    "\075\026\057\030\053\031\047\032\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\073\024\056\026\057\030\053\031\047" +
    "\032\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\062\024" +
    "\056\026\057\030\053\031\047\032\026\001\001\000\002" +
    "\001\001\000\014\024\072\026\057\030\053\031\047\032" +
    "\026\001\001\000\014\024\071\026\057\030\053\031\047" +
    "\032\026\001\001\000\002\001\001\000\014\024\070\026" +
    "\057\030\053\031\047\032\026\001\001\000\002\001\001" +
    "\000\004\034\066\001\001\000\004\034\066\001\001\000" +
    "\004\034\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\066\001\001\000\020\020\077\021\100\024" +
    "\056\026\057\030\053\031\047\032\026\001\001\000\002" +
    "\001\001\000\004\040\101\001\001\000\002\001\001\000" +
    "\020\020\077\021\103\024\056\026\057\030\053\031\047" +
    "\032\026\001\001\000\004\040\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\033" +
    "\011\110\012\041\013\022\014\031\015\037\016\035\017" +
    "\036\022\024\023\027\031\040\032\026\033\042\001\001" +
    "\000\002\001\001\000\034\010\033\011\112\012\041\013" +
    "\022\014\031\015\037\016\035\017\036\022\024\023\027" +
    "\031\040\032\026\033\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\033\011\115\012\041\013\022" +
    "\014\031\015\037\016\035\017\036\022\024\023\027\031" +
    "\040\032\026\033\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\010\033\011\122\012\041\013\022\014" +
    "\031\015\037\016\035\017\036\022\024\023\027\031\040" +
    "\032\026\033\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\123\001\001\000\002\001\001\000\010" +
    "\027\125\031\126\032\026\001\001\000\004\043\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\131" +
    "\031\126\032\026\001\001\000\004\043\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\014\037\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\141\007\140\001\001\000\002\001\001\000\006\005\142" +
    "\010\017\001\001\000\002\001\001\000\004\041\152\001" +
    "\001\000\002\001\001\000\006\025\146\042\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\146\042" +
    "\151\001\001\000\002\001\001\000\004\035\157\001\001" +
    "\000\002\001\001\000\004\041\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/* s.init();*/ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    parser(Scanner s, String k){ this.s=s; }

   public VisitableNode<String> makeNode(String name, VisitableNode<String> ... childrens){

           VisitableNode<String> toReturn = new VisitableNode<String>(name);

           for(int i = 0; i < childrens.length; i ++){
               toReturn.add(childrens[i]);
           }

           return toReturn;
       }

     public VisitableNode<String> makeNode(String name, ArrayList<VisitableNode<String>> childrens){

               VisitableNode<String> toReturn = new VisitableNode<String>(name);

                for (VisitableNode<String> node : childrens)
                   toReturn.add(node);

               return toReturn;
           }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program_n ::= PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block END_PROGRAM 
            {
              VisitableNode<String> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                       VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(attr));
                                        RESULT= makeNode(Constant.PROGRAM_NODE, id_node, ptr);
                                        NodeVisitor visitor = new NodeVisitor();
                                       visitor.visit(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_n",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program_n EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> start_val = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= variable_declaration_part procedure_declaration_part statement_part 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodes2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodes2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<String>> nodes2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node3 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 VisitableNode<String> proc_node = makeNode(Constant.PROC_DECL_PART, nodes2);
                                                 RESULT = makeNode(Constant.BLOCK_OP,node1,proc_node,node3);

                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variable_declaration_part ::= VAR variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         if(list!=null){
                                          list.add(node1);
                                          RESULT = makeNode(Constant.VAR_DECL_PART_NODE,list);}
                                          else {
                                         RESULT = makeNode(Constant.VAR_DECL_PART_NODE,node1);}




              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_declaration_part ::= 
            {
              VisitableNode<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> node2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                       RESULT = new ArrayList<VisitableNode<String>>();
                                       if(node2!=null)
                                     ((ArrayList<VisitableNode<String>>) RESULT).addAll(node2);
                                     ((ArrayList<VisitableNode<String>>) RESULT).add(node1);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_declaration ::= IDENTIFIER identifiers simple_type 
            {
              VisitableNode<String> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<String>> ptr_sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(attr));
                                         if(ptr_sts!=null){
                                         ptr_sts.add(0,makeNode(type));
                                         ptr_sts.add(id_node);
                                         RESULT = makeNode(Constant.VAR_DECL_NODE,ptr_sts);}
                                         else {
                                          RESULT = makeNode(Constant.VAR_DECL_NODE, makeNode(type), id_node);
                                         }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifiers ::= SEPARATOR IDENTIFIER identifiers 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> node1 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = new ArrayList<VisitableNode<String>>();
                                    VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(attr));
                                    if(node1!=null)
                                    ((ArrayList<VisitableNode<String>>) RESULT).addAll(node1);
                                    ((ArrayList<VisitableNode<String>>) RESULT).add(id_node);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT = "integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_declaration_part ::= procedure_declaration INSTRUCTION_SEPARATOR procedure_declaration_part 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> node2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                                       RESULT = new ArrayList<VisitableNode<String>>();
                                           if(node2!=null)
                                            ((ArrayList<VisitableNode<String>>) RESULT).addAll(node2);
                                            ((ArrayList<VisitableNode<String>>) RESULT).add(node1);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_declaration_part ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_declaration ::= PROCEDURE IDENTIFIER INSTRUCTION_SEPARATOR simple_block 
            {
              VisitableNode<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                                                       RESULT = makeNode(Constant.PROC_NODE, id_node, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_block ::= variable_declaration_part statement_part 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.SIMPLE_BLOCK_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement_part ::= compound_statement 
            {
              VisitableNode<String> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_statement ::= BEGIN statement statements END 
            {
              VisitableNode<String> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> ptr_st = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<String>> ptr_sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    if(ptr_sts!=null){
                                                          ptr_sts.add(ptr_st);
                                                          RESULT = makeNode(Constant.COMP_NODE, ptr_sts);}
                                                         else
                                                            RESULT = makeNode(Constant.COMP_NODE, ptr_st);


                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= INSTRUCTION_SEPARATOR statement statements 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> node2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        RESULT = new ArrayList<VisitableNode<String>>();
                                                                               if(node2!=null)
                                        ((ArrayList<VisitableNode<String>>) RESULT).addAll(node2);
                                        ((ArrayList<VisitableNode<String>>) RESULT).add(node1);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= simple_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= structured_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_statement ::= assignment_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_statement ::= read_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_statement ::= procedure_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_statement ::= write_statement 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment_statement ::= variable ASSIGN expression 
            {
              VisitableNode<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                            RESULT = makeNode(Constant.ASSIGN_OP, id_node, node);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // read_statement ::= READ LPAR input_variable read_variables RPAR 
            {
              VisitableNode<String> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ptr_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<String>> ptr_sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        if(ptr_sts!=null){
                                        ((ArrayList<VisitableNode<String>>)ptr_sts).add(makeNode(Constant.ID_NODE, makeNode(ptr_st)));
                                        RESULT = makeNode(Constant.READ_NODE, ptr_sts);}
                                        else
                                    RESULT = makeNode(Constant.READ_NODE, makeNode(Constant.ID_NODE, makeNode(ptr_st)));


                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // read_variables ::= SEPARATOR input_variable read_variables 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> ptr2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                RESULT = new ArrayList<VisitableNode<String>>();
                                                                                       if(ptr2!=null)

                                                ((ArrayList<VisitableNode<String>>) RESULT).addAll(ptr2);
                                                ((ArrayList<VisitableNode<String>>) RESULT).add(makeNode(Constant.ID_NODE,makeNode(ptr1)));
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_variables ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // input_variable ::= variable 
            {
              String RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = ptr1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_statement ::= procedure_identifier 
            {
              VisitableNode<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                        RESULT = makeNode(Constant.CALL_OP_NODE, id_node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_identifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // write_statement ::= WRITE LPAR output_value output_values RPAR 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<String>> node2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                     node2.add(node1);
                                                     RESULT = makeNode(Constant.WRITE_NODE, node2);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // output_values ::= SEPARATOR output_value output_values 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<String>> node2 = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        RESULT = new ArrayList<VisitableNode<String>>();
                                                                               if(node2!=null)

                                            ((ArrayList<VisitableNode<String>>) RESULT).addAll(node2);
                                            ((ArrayList<VisitableNode<String>>) RESULT).add(node1);

                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // output_values ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // output_value ::= expression 
            {
              VisitableNode<String> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> ptr = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structured_statement ::= compound_statement 
            {
              VisitableNode<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> v = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structured_statement ::= if_statement 
            {
              VisitableNode<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> v = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structured_statement ::= while_statement 
            {
              VisitableNode<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> v = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_statement ::= IF expression THEN statement 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.IF_THEN_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_statement ::= IF expression THEN statement ELSE statement 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node3 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.IF_THEN_ELSE_NODE, node1, node2, node3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_statement ::= WHILE expression DO statement INSTRUCTION_SEPARATOR 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = makeNode(Constant.WHILE_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= simple_expression 
            {
              VisitableNode<String> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.SIMPLE_NODE, node);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= simple_expression RELOP simple_expression 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> rel_node = makeNode(Constant.REL_NODE, makeNode(value));
                     RESULT = makeNode(Constant.REL_OP, rel_node, node1, node2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_expression ::= simple_expression adding_operator simple_expression 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> add_node = makeNode(Constant.ADD_NODE, makeNode(value));
                             RESULT = makeNode(Constant.ADD_OP, add_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression ::= simple_expression MULT_OPERATOR simple_expression 
            {
              VisitableNode<String> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<String> node1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> mul_node = makeNode(Constant.MUL_NODE, makeNode(value));
                                                  RESULT = makeNode(Constant.MUL_OP, mul_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_expression ::= variable 
            {
              VisitableNode<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  VisitableNode<String> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                                RESULT = makeNode(Constant.VAR_NODE, id_node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_expression ::= constant 
            {
              VisitableNode<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<String> constant_node = makeNode(Constant.CONSTANT_NODE, makeNode(value));
                                            RESULT = makeNode(Constant.CONST_NODE, constant_node);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_expression ::= LPAR expression RPAR 
            {
              VisitableNode<String> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeNode(Constant.EXPR_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_expression ::= NOT expression 
            {
              VisitableNode<String> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.NOT_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_expression ::= MINUS simple_expression 
            {
              VisitableNode<String> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<String> node = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.UNARY_MINUS_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // adding_operator ::= ADD_OPERATOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // adding_operator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable ::= variable_identifier 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constant ::= INTEGER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constant ::= CHARACTER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= v ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constant ::= STRING_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= v ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constant ::= constant_identifier 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= value ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constant_identifier ::= TRUE 
            {
              String RESULT =null;
		 RESULT= "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constant_identifier ::= FALSE 
            {
              String RESULT =null;
		 RESULT= "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
